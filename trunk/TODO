Completely implement parsing of a WSDL document into a GWSDocument
and related objects (this is pretty close now).

Add binding support so we can do the whole SOAP thing automatically
over http, https etc (done, but needs more testing etc).

Implement generation of a WSDL document from a GWSDocument (actually, this works but could do with improving).

Implement parsing of schema documents for SOAP type definitions (not started).

Apply SOAP type definition information derived from WSDL/schemas to
encoding/decoding SOAP messages in the 'literal' style.

Add support for more of the basic xsi:... types.

Examples

Implement a gui application to open/parse a WSDL document and display its
contents in an easy to understand manner with forms allowing you to select
a service/method, enter parameters and make a call to the service, and see
the results of that call.

Implement a gui application (better would be to add a plugin to Gorm) to
allow graphical creation of a service definition (ie create methods and
define the arguments and result of the method etc).  This should then allow
a WSDL document describing the service to be renerated, and stub code for
the server/clint to be produced.

Add support for encryption and signing of requests.

PS. When I first started work on this it was because I had a few web services
that I needed to interface to from ObjC servers, and there was no easy way to
do it.  I had in mind a library to permit me to do that and an associated GUI
application to display/edit WSDL documents, make test calls to a web service,
and perhaps generate stub code.  My TODO list reflects this initial idea.
Now it seems like the fad for web services is over ... so I'm unlikely to
need to cope with such ugliness very often, and the existing features of the
library are sufficient for most purposes.  That means that major development
is probably fozen until/unless I find I need it or someone else wants to help.

That being said, it seems that the WebServices library is not just for WSDL!
In fact I've found that I have been using the library for XML parsing generally.
This is because the GWSCoder/GWSElement combination appears to be easier to
use for general XML work than any other API available!

GNUstep-base (and the base additions library for OSX) have provided a fully
featured wrapper round libxml2 for many years, and more recently Apple have
added their own wrapper round libxml2 to Foundation.  However, both of these
APIs are much more heavyweight than GWSElement, and the extra complexity is
unnecessary in almost all applications.  It turns out that for general XML
work GWSElement is a quicker and easier to use API than the alternatives.

